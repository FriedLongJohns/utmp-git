#!/bin/bash
mode=$1
key=$2
opt=$3
what=$4

trap 'echo -e "\033[0;31m Utmp stopped :::during::: unknown state\033[0;0m"; exit 1' SIGINT

WDIR=$(dirname $0)
if [ "X$mode" = "X" ]; then
	$WDIR/utmp-desc
	exit 1
fi

DIR=~/utmp
TEMPDIR=~/utmp/temp

[ ! -d $DIR ] && ( echo "\033[0;32mno existing DIR, creating new directory!\033[0;0m" && mkdir $DIR )
[ ! -d $TEMPDIR ] && ( echo "\033[0;32mno existing TEMPDIR, creating new directory!\033[0;0m" && mkdir $TEMPDIR )

echo ""

if [ $mode = "list" ]; then
	echo -e "\033[0;32mCurrent Stored Library:\033[0;0m"
	echo -e "\033[0;32mKeyword: $key\033[0;0m"
	echo -e "\033[0;32m----------------------\033[0;0m"

	count=0
	queue=$(ls $DIR/{*.mp3,*.m4a} | tr " " "^")

	for file in $queue; do
			file=$(echo $file | tr "^" " ")
	    tex="\033[0;32m$count\033[0;0m : $(echo $file | sed 's/.*\///g')"
			echo -e $tex | grep ".*$key.*"
			((count++))
	done

	echo -e "\033[0;32m----------------------\033[0;0m"

elif [ "$mode" = "find" ] || [ "$mode" = "down" ]; then
	[ -z "$key" ] && echo -e "\033[0;31mNeed <key> to download/find from Youtube!\033[0;0m" && exit 1
	#^ there is key OR I exit now

	if [ $mode = "find" ]; then
		echo -e "\033[0;32mSearching for '$key'...\033[0;0m"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: find\033[0;0m"; exit 1' SIGINT

		if [ "$what" = "-s" ] || [ "$opt" = "-s" ]; then
			echo -e "\033[0;32m[-s] removed \"-f 139\" from command\033[0;0m"
			echo "yt-dlp "$key" --default-search auto --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
			yt-dlp "$key" --default-search auto --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
		else
			echo "yt-dlp "$key" -f 139 --default-search auto --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
			yt-dlp "$key" -f 139 --default-search auto --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
		fi
	else
		echo -e "\033[0;32mDownloading from '$key'...\033[0;0m"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: down\033[0;0m"; exit 1' SIGINT

		if [ "$what" = "-s" ] || [ "$opt" = "-s" ]; then
			echo -e "\033[0;32m[-s] removed \"-f 139\" from command\033[0;0m"
			echo "yt-dlp "$key" --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
			yt-dlp "$key" --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
		else
			echo "yt-dlp "$key" -f 139 --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
			yt-dlp "$key" -f 139 --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
		fi
		#still force 1 download because we only move the 1 last download, not all downloaded
	fi

	name=$(ls -t $TEMPDIR | tail -1)
	[ "$name" = "" ] && echo -e "\033[0;31mCould not find downloaded file!\033[0;0m" && echo -e "\033[0;32mDid you forget to use -s while dowloading or not have wifi?\033[0;0m" && trap - SIGINT && exit 1
	echo -e "\033[0;32mDownloaded result as: $name\033[0;0m"

	if [ "$what" = "-s" ] || [ "$opt" = "-s" ]; then
		echo -e "\033[0;33m[-s] Result is already mp3, not converting!\033[0;0m"
		fname=$name
	else
		echo -e "\033[0;32mConverting result to mp3...\033[0;0m"
		fname=$(echo $name | sed -e 's,.m4a,.mp3,g')
		echo "ffmpeg -i \"$TEMPDIR/$name\" \"$TEMPDIR/$fname\" -loglevel fatal -y"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: file conversion\033[0;0m"; echo -e "\033[0;33mClearing TEMPDIR ($TEMPDIR)...\033[0;0m"; rm $TEMPDIR/*; exit 1' SIGINT

		ffmpeg -i "$TEMPDIR/$name" "$TEMPDIR/$fname" -loglevel fatal -y
		#-y to automatically overwrite files without prompting
		echo -e "\033[0;32mConverted to: $fname\033[0;0m"
	fi

	if [ "$what" = "-s" ] || [ "$opt" = "-s" ]; then
		echo -e "\033[0;32m[-s] Did not remove nonexistent old file\033[0;0m"
	else
		echo "rm \"$TEMPDIR/$name\""
		rm "$TEMPDIR/$name"
		echo -e "\033[0;32mRemoved old file\033[0;0m"
	fi

	echo -e "\033[0;32mDone downloading!\033[0;0m"

	echo "mv \"$TEMPDIR/$fname\" \"$DIR/$fname\""
	mv "$TEMPDIR/$fname" "$DIR/$fname"

	if [ "$opt" = "-t" ]; then
		echo -e "\033[0;32m[-t] Playing '$fname'\033[0;0m"
		echo "ffplay -i \"$DIR/$fname\" -showmode 1 -autoexit -volume 25 -loglevel fatal"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: file playback\033[0;0m"; exit 1' SIGINT

		ffplay -i "$DIR/$fname" -showmode 1 -autoexit -volume 25 -loglevel fatal
	fi

	if [ "$opt" = "-t" ] || [ "$opt" = "-p" ]; then
		read -r -p "Delete file? [N/y]: " inp
		if [ "$inp" = "N" ]; then
			echo -e "\033[0;32mWill not delete file\033[0;0m"
		else
			echo -e "\033[0;33mDeleting $fname!\033[0;0m"
			echo "rm \"$DIR/$fname\""
			rm "$DIR/$fname"
			echo -e "\033[0;32mDone\033[0;0m"
		fi
	fi

elif [ $mode = "play" ]; then
	[ -z "$key" ] && echo -e "\033[0;31mNeed <key> to play songs!\033[0;0m" && trap - SIGINT && exit 1

	trap 'echo -e "\033[0;31m Utmp stopped :::during::: file playback\033[0;0m"; exit 1' SIGINT

	if [ "$key" = "all" ]; then
		echo -e "\033[0;33mPlaying ALL songs!\033[0;0m"
		queue=$(ls $DIR/{*.mp3,*.m4a} | tr " " "^" | sort -R)

		for file in $queue; do
			file=$(echo $file | tr "^" " ")
			echo -e "\033[0;32mPlaying $file...\033[0;0m"
			echo "ffplay -i \"$file\" -showmode 1 -autoexit -volume 25 -loglevel fatal"
			ffplay -i "$file" -showmode 1 -autoexit -volume 25 -loglevel fatal
			((count++))
		done
	fi

	IFS=',' read -ra dexes <<< "$key"
	echo -e "\033[0;32mPlaying songs: ${dexes[@]}\033[0;0m"
	for index in ${dexes[@]}; do
		foundf=/tmp/found.$$
		echo 0 > $foundf
		count=0
		queue=$(ls $DIR/{*.mp3,*.m4a} | tr " " "^")

		for file in $queue; do
				file=$(echo $file | tr "^" " ")
		    if [ $count = $index ]; then
					echo -e "\033[0;32mPlaying [$index]: $file\033[0;0m"
					echo "ffplay -i \"$file\" -showmode 1 -autoexit -volume 25 -loglevel fatal"
					ffplay -i "$file" -showmode 1 -autoexit -volume 25 -loglevel fatal
					echo 1 > $foundf
				fi
				((count++))
		done

		found=$(cat $foundf)
		[ $found -eq 0 ] && ( echo -e "\033[0;33mCannot play [$index]: File not found!\033[0;0m" )
		rm $foundf
	done

elif [ $mode = "expo" ]; then
	trap 'echo -e "\033[0;31m Utmp stopped :::during::: library export\033[0;0m"; exit 1' SIGINT
	out="echo \"::UTMP LIBRARY IMPORT::\""

	if [ "$key" = "all" ] || [ -z "$key" ]; then
		echo -e "\033[0;33mExporting ALL songs!\033[0;0m"
		queue=$(ls $DIR/{*.mp3,*.m4a} | tr " " "^" | sort -R)

		for file in $queue; do
			file=$(echo $file | tr "^" " ")

			#cope with both yt-dlp ID's and full url's!
			url=$(echo $file | sed 's#_#/#g')
			#remove left side, remove right side
			url=$(echo $url | sed 's#.*\[##g')
			url=$(echo $url | sed 's#\].*##g')

			if [ "$url" = "" ] || [ "$url" = "$file" ]; then
				echo -e "\033[0;33m$file has no formatted url, skipping!\033[0;0m"
			else
				echo -e "\033[0;32mExport: $file \033[0;0m->\033[0;32m $url\033[0;0m"
				out="$out && utmp down \"$url\" -p"
				# echo $out
			fi

			((count++))
		done
		echo $out
	fi

	IFS=',' read -ra dexes <<< "$key"
	echo -e "\033[0;32mPlaying songs: ${dexes[@]}\033[0;0m"
	for index in ${dexes[@]}; do
		foundf=/tmp/found.$$
		echo 0 > $foundf
		count=0
		queue=$(ls $DIR/{*.mp3,*.m4a} | tr " " "^")

		for file in $queue; do
				file=$(echo $file | tr "^" " ")
		    if [ $count = $index ]; then
					cfile=$(echo $file | tr "^" " ")

					#cope with both yt-dlp ID's and full url's!
					url=$(echo $cfile | sed 's#_#/#g')
					#remove left side, remove right side
					url=$(echo $url | sed 's#.*\[##g')
					url=$(echo $url | sed 's#\].*##g')

					if [ "$url" = "" ] || [ "$url" = "$file" ] || [ "$url" = "$cfile" ]; then
						echo -e "\033[0;33m$file has no formatted url, skipping!\033[0;0m"
					else
						echo -e "\033[0;32mExport: $file \033[0;0m->\033[0;32m $url\033[0;0m"
						out="$out && utmp down \"$url\" -p"
						# echo $out
					fi

					echo 1 > $foundf
				fi
				((count++))
		done

		found=$(cat $foundf)
		[ $found -eq 0 ] && ( echo -e "\033[0;33mCannot export [$index]: File not found!\033[0;0m" )
		rm $foundf
	done
	echo $out

else
	echo -e "\033[0;31mInvalid mode $mode!\033[0;0m"
	trap - SIGINT
	echo $out
	exit 1
fi
