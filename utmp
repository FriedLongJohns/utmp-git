#!/bin/bash
shopt -s extglob
#for nice regex in list expansion things

mode=$1
key=$2
opt=$3
what=$4

trap 'echo -e "\033[0;31m Utmp stopped :::during::: unknown state\033[0;0m"; exit 1' SIGINT

WDIR=$(dirname $0)
if [ "X$mode" = "X" ]; then
	$WDIR/utmp-desc
	exit 1
fi

DIR=~/utmp
TEMPDIR=~/utmp/temp
VOLUME=10

[ ! -d $DIR ] && ( echo "\033[0;32mno existing DIR, creating new directory!\033[0;0m" && mkdir $DIR )
[ ! -d $TEMPDIR ] && ( echo "\033[0;32mno existing TEMPDIR, creating new directory!\033[0;0m" && mkdir $TEMPDIR )

echo ""

if [ $mode = "list" ]; then
	echo -e "\033[0;32mCurrent Stored Library:\033[0;0m"
	echo -e "\033[0;32mKeyword: $key\033[0;0m"
	echo -e "\033[0;32m----------------------\033[0;0m"

	count=0
	prequeue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} | tr " " "^" | sort)
	queue=""

	#some files may not follow utmp's file format and so doing all the cuts on them would destroy their filenames BROKEN
	for file in $prequeue; do
		#supposedly char 16 is the [ char
		if [ "${file:16:1}X" == "[X" ]; then # follows utmp format :), chop off url
			file=$(echo $file | cut -d ] -f 2- | cut -d - -f 2- )
		fi
		# if it didn't, just be OK with that and sort as is

		queue="${queue} ${file}"
	done

	queue=$(echo $queue | sort)

	for file in $queue; do
			file=$(echo $file | tr "^" " ")
	    tex="\033[0;32m$count\033[0;0m : $(echo $file | sed 's/.*\///g')"
			echo -e $tex | grep ".*$key.*"
			((count++))
	done

	echo -e "\033[0;32m----------------------\033[0;0m"


elif [ "$mode" = "find" ] || [ "$mode" = "down" ]; then
	[ -z "$key" ] && echo -e "\033[0;31mNeed <key> to download/find from Youtube!\033[0;0m" && exit 1
	#^ there is key OR I exit now

	if [ $mode = "find" ]; then
		echo -e "\033[0;32mSearching for '$key'...\033[0;0m"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: find\033[0;0m"; exit 1' SIGINT

		echo "yt-dlp "$key" -f ba --default-search auto --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
		yt-dlp "$key" -f ba --default-search auto --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
	else
		echo -e "\033[0;32mDownloading from '$key'...\033[0;0m"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: down\033[0;0m"; exit 1' SIGINT

		echo "yt-dlp "$key" -f ba --max-downloads 1 --abort-on-error --quiet -o \"$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s\""
		yt-dlp "$key" -f ba --max-downloads 1 --abort-on-error --quiet -o "$TEMPDIR/[%(id)s]  -  %(title)s.%(ext)s"
		#still force 1 download because we only move the 1 last download, not all downloaded
	fi

	name=$(ls -t $TEMPDIR | tail -1)
	[ "$name" = "" ] && echo -e "\033[0;31mCould not find downloaded file!\033[0;0m" && echo -e "\033[0;32mDid you forget to use -s while dowloading or not have wifi?\033[0;0m" && trap - SIGINT && exit 0
	echo -e "\033[0;32mDownloaded result as: $name\033[0;0m"

	echo "mv \"$TEMPDIR/$name\" \"$DIR/$name\""
	mv "$TEMPDIR/$name" "$DIR/$name"

	if [ "$opt" = "-t" ]; then
		echo -e "\033[0;32m[-t] Playing '$name'\033[0;0m"
		echo "ffplay -i \"$DIR/$name\" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal"

		trap 'echo -e "\033[0;31m Utmp stopped :::during::: file playback\033[0;0m"; exit 1' SIGINT

		ffplay -i "$DIR/$name" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal
	fi

	if [ "$opt" = "-t" ] || [ "$opt" = "-p" ]; then
		read -r -p "Delete file? [n/Y]: " inp
		if [ "$inp" = "Y" ]; then
			echo -e "\033[0;33mDeleting $name!\033[0;0m"
			echo "rm \"$DIR/$name\""
			rm "$DIR/$name"
			echo -e "\033[0;32mDone\033[0;0m"
		else
			echo -e "\033[0;32mWill not delete file\033[0;0m"
		fi
	fi

	echo -e "\033[0;31mFinished!\033[0;0m"
	trap - SIGINT
	exit 0


elif [ $mode = "play" ]; then
	[ -z "$key" ] && echo -e "\033[0;31mNeed <key> to play songs!\033[0;0m" && trap - SIGINT && exit 1

	trap 'echo -e "\033[0;31m Utmp stopped :::during::: file playback\033[0;0m"; exit 1' SIGINT

	if [ "$key" = "all" ]; then
		echo -e "\033[0;33mPlaying ALL songs!\033[0;0m"
		queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} 2>/dev/null | tr " " "^" | sort -R)

		if [ "X$queue" == "X" ]; then
			echo -e "\033[0;31mThere are no songs!\033[0;0m"
			trap - SIGINT
			exit 0
		fi

		for file in $queue; do
			file=$(echo $file | tr "^" " ")
			echo -e "\033[0;32mPlaying $file...\033[0;0m"
			echo "ffplay -i \"$file\" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal"
			ffplay -i "$file" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal
			((count++))
		done

		echo -e "\033[0;32mFinished!\033[0;0m"
		trap - SIGINT
		exit 0
	fi

	IFS=',' read -ra dexes <<< "$key"
	echo -e "\033[0;32mPlaying songs: ${dexes[@]}\033[0;0m"
	for index in ${dexes[@]}; do
		count=0
		queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} 2>/dev/null | tr " " "^")
		plaid=0

		if [ "X$queue" == "X" ]; then
			echo -e "\033[0;31mThere are no songs!\033[0;0m"
			trap - SIGINT
			exit 0
		fi

		for file in $queue; do
				file=$(echo $file | tr "^" " ")
		    if [ $count = $index ]; then
					echo -e "\033[0;32mPlaying [$index]: $file\033[0;0m"
					echo "ffplay -i \"$file\" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal"
					ffplay -i "$file" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal
					plaid=1
					break
				fi
				((count++))
		done

		if [ $plaid -eq 0 ]; then
			echo -e "\033[0;33mCannot play [$index]: Index not found!\033[0;0m"
			echo -e "\033[0;32mUsing "$index" as a search keyword...\033[0;0m"
		else
			continue
			#don't do the thing below then
		fi

		for rawfile in $queue; do
				file=$(echo $rawfile | tr "^" " ")
				if [[ "$file" == *"$index"* ]]; then
					echo -e "\033[0;32mFound '$index': $file\033[0;0m"
					echo "ffplay -i \"$file\" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal"
					ffplay -i "$file" -showmode 1 -autoexit -volume $VOLUME -loglevel fatal
					plaid=1
		    fi
		done

		[ $plaid -eq 0 ] && ( echo -e "\033[0;31mCannot play or find: $index!\033[0;0m" )
	done


elif [ $mode = "expo" ]; then
	trap 'echo -e "\033[0;31m Utmp stopped :::during::: library export\033[0;0m"; exit 1' SIGINT
	out="echo \"::UTMP LIBRARY IMPORT::\""

	if [ "$key" = "all" ] || [ -z "$key" ]; then
		echo -e "\033[0;33mExporting ALL songs!\033[0;0m"
		queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} 2>/dev/null | tr " " "^")

		if [ "X$queue" == "X" ]; then
			echo -e "\033[0;31mThere are no songs!\033[0;0m"
			trap - SIGINT
			exit 0
		fi

		for file in $queue; do
			file=$(echo $file | tr "^" " ")

			#cope with both yt-dlp ID's and full url's!
			url=$(echo $file | sed 's#_#/#g')
			#remove left side, remove right side
			url=$(echo $url | sed 's#.*\[##g')
			url=$(echo $url | sed 's#\].*##g')

			if [ "$url" = "" ] || [ "$url" = "$file" ]; then
				echo -e "\033[0;33m$file has no formatted url, skipping!\033[0;0m"
			else
				echo -e "\033[0;32mExport: $file \033[0;0m->\033[0;32m $url\033[0;0m"
				out="$out && utmp down \"$url\""
				# echo $out
			fi

			((count++))
		done
		echo $out
		trap - SIGINT
		exit 1
	fi

	IFS=',' read -ra dexes <<< "$key"
	echo -e "\033[0;32mExporting songs: ${dexes[@]}\033[0;0m"
	for index in ${dexes[@]}; do
		foundf=/tmp/found.$$
		echo 0 > $foundf
		count=0
		queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} 2>/dev/null | tr " " "^")

		if [ "X$queue" == "X" ]; then
			echo -e "\033[0;31mThere are no songs!\033[0;0m"
			trap - SIGINT
			exit 0
		fi

		for file in $queue; do
				file=$(echo $file | tr "^" " ")
		    if [ $count = $index ]; then
					cfile=$(echo $file | tr "^" " ")

					#cope with both yt-dlp ID's and full url's!
					url=$(echo $cfile | sed 's#_#/#g')
					#remove left side, remove right side
					url=$(echo $url | sed 's#.*\[##g')
					url=$(echo $url | sed 's#\].*##g')

					if [ "$url" = "" ] || [ "$url" = "$file" ] || [ "$url" = "$cfile" ]; then
						echo -e "\033[0;33m$file has no formatted url, skipping!\033[0;0m"
					else
						echo -e "\033[0;32mExport: $file \033[0;0m->\033[0;32m $url\033[0;0m"
						out="$out && utmp down \"$url\""
						# echo $out
					fi

					echo 1 > $foundf
				fi
				((count++))
		done

		found=$(cat $foundf)
		[ $found -eq 0 ] && ( echo -e "\033[0;33mCannot export [$index]: File not found!\033[0;0m" )
		rm $foundf
	done
	echo $out


elif [ $mode = "remv" ]; then
	trap 'echo -e "\033[0;31m Utmp stopped :::during::: media deletion\033[0;0m"; exit 1' SIGINT

	if [ "$key" = "all" ] || [ -z "$key" ]; then
		echo -e "\033[0;33mAre you sure you want to delete ALL songs?\033[0;0m"
		read -r -p "Proceed? [n/Y]: " inp
		if [ "$inp" = "Y" ]; then
			echo -e "\033[0;31mDeleting everything...\033[0;0m"
			rm -R $DIR/*
			echo "rm -R $DIR/*"
			echo -e "\033[0;32mFinised deletion.\033[0;0m"
		else
			echo -e "\033[0;32mWill not delete.\033[0;0m"
			trap - SIGINT
			exit 1
		fi
	fi

	IFS=',' read -ra dexes <<< "$key"
	echo -e "\033[0;32mDeleting songs: ${dexes[@]}\033[0;0m"
	min=0
	for index in ${dexes[@]}; do
		foundf=/tmp/found.$$
		echo 0 > $foundf
		count=0
		queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3} 2>/dev/null | tr " " "^")

		if [ "X$queue" == "X" ]; then
			echo -e "\033[0;31mThere are no songs!\033[0;0m"
			trap - SIGINT
			exit 0
		fi

		for file in $queue; do
				file="$(echo $file | sed 's#\^# #g')"
				temp=$(($index-$min))

		    if [ $count = $temp ]; then
					echo -e "\033[0;33mDeleting [$index]: $file\033[0;0m"
					rm -i "$file"

					echo 1 > $foundf
					((min++))
				fi
				((count++))
		done

		found=$(cat $foundf)
		[ $found -eq 0 ] && ( echo -e "\033[0;33mCannot delete [$index]: File not found!\033[0;0m" )
		rm $foundf
	done
	echo -e "\033[0;32mFinished deletion.\033[0;0m"


elif [ $mode = "clen" ]; then
	trap 'echo -e "\033[0;31m Utmp stopped :::during::: file cleaning\033[0;0m"; exit 1' SIGINT

	queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3})
	queue=$(echo $queue | sed "s# /#∆#g" | sed "s# #π#g" | sed "s#∆# #g")
	foundf=0

	for fil in $queue; do
		pfil="${fil//π/ }"#I am going to go insane
		nfil="${pfil%.*}"
		nfilxt="${pfil##*.}"
		# echo -e "\033[0;32mChecking: $pfil\033[0;0m"

		for file in $queue; do
			pfile="${file//π/ }"
			nfile="${pfile%.*}"
			nfilext="${pfile##*.}"

	    if [ "$nfil" = "$nfile" ] && [ "$nfilxt" != "$nfilext" ]; then
				echo -e "\033[0;33mFound duplicate: $pfile\033[0;0m"
				if [ "$nfilxt" = "webm" ]; then
					rm /"$pfile"
				elif [ "$nfilext" = "webm" ]; then
					rm /"$pfil"
				elif [ "$nfilxt" = "wav" ]; then
					rm /"$pfile"
				else
					rm /"$pfil"
				fi
				foundf=1
				queue=$(ls $DIR/{*.wav,*.m4a,*.webm,*.mp3})
				queue=$(echo $queue | sed "s# /#∆#g" | sed "s# #π#g" | sed "s#∆# #g")
			fi
		done
	done

	[ $foundf -eq 0 ] && ( echo -e "\033[0;32mFound no duplicates!\033[0;0m" )

else
	echo -e "\033[0;31mInvalid mode $mode!\033[0;0m"
	trap - SIGINT
	echo $out
	exit 1
fi

trap - SIGINT
exit 1
